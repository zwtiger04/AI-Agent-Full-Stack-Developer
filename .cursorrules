🚀 AI 코딩 규칙 (.cursorrules)
📋 프로젝트 컨텍스트 관리 (최우선)

작업 시작 전 필수 파일 리뷰:
1. README.md와 DEVELOPMENT_CONTEXT.md를 먼저 읽고 현재 상태 파악
2. 다음 코드 파일들을 순서대로 리뷰:
   - main.py: 전체 프로그램 흐름 파악
   - electimes_crawler.py: 크롤링 로직 이해
   - keyword_processor.py: 키워드 처리 로직 확인
   - news_processor.py: 뉴스 처리 로직 검토
   - article_recommender.py: 추천 시스템 로직 파악
   - ai_update_content.py: AI 기반 내용 업데이트 로직 확인
   - notion_client.py: Notion 연동 로직 이해
3. CODE_DESCRIPTION.md를 통해 코드 변경 사항과 영향도 파악
4. 기존 코드 패턴과 컨벤션 분석 후 일관성 유지
5. 새로운 코드는 기존 아키텍처 패턴을 따라 작성
6. 작업 완료 후 README.md 진행상황과 DEVELOPMENT_CONTEXT.md 자동 업데이트
7. CODE_DESCRIPTION.md에 코드 변경 사항과 영향도 자동 업데이트

문서 관리 규칙:
1. CODE_DESCRIPTION.md와 Codedescription.md는 CODE_DESCRIPTION.md로 통합
2. 모든 코드 변경사항은 CODE_DESCRIPTION.md에 자동으로 기록
3. 문서 업데이트는 작업 시작/완료 시 자동으로 수행
4. 새로운 컨벤션이나 패턴 발견 시 자동 문서화
5. 문서 간 일관성 유지를 위한 검증 로직 구현

🔧 코드 품질 & 구조 (핵심 규칙)

순환참조 방지 및 의존성 명확히 분리해서 작성
하드코딩 값들을 환경변수나 상수로 분리해서 관리
SOLID 원칙을 준수하면서 코드 작성
DRY 원칙에 따라 중복 코드 최소화
함수는 단일 책임 원칙에 따라 작은 단위로 분리
의미있는 변수명과 함수명 사용 (축약어 지양)
코드에 적절한 주석과 JSDoc/docstring 추가

⚡ 에러 처리 & 안정성 (필수)

모든 비동기 작업에 적절한 에러 핸들링 추가
TypeScript 타입을 명시적으로 정의해서 타입 안정성 확보
null/undefined 체크를 꼼꼼히 해서 런타임 에러 방지
try-catch 블록을 적절히 사용해서 예외 상황 처리
에러 메시지는 구체적이고 디버깅에 도움되도록 작성
fail-fast 원칙 적용 (조기 리턴, 가드 클로즈)

🚀 성능 & 최적화

메모리 누수 방지를 위해 이벤트 리스너 정리와 리소스 해제
불필요한 재렌더링을 방지하는 최적화 적용
데이터베이스 쿼리를 효율적으로 작성 (N+1 문제 방지)
캐싱 전략을 고려해서 구현
무거운 연산은 비동기 처리나 웹 워커 활용
이미지나 파일은 lazy loading 적용

🧪 테스트 & 검증

모든 주요 함수에 대해 단위 테스트 작성
엣지 케이스와 에러 상황에 대한 테스트 포함
API 엔드포인트는 통합 테스트 작성
테스트 코드는 Given-When-Then 패턴 사용
목(Mock)과 스파이(Spy)를 적절히 활용

🔒 보안 & 인증

사용자 입력값은 항상 검증과 이스케이프 처리
SQL 인젝션, XSS 공격 방지를 위한 예방 코드 작성
민감한 정보는 환경변수로 관리, 코드에 하드코딩 금지
JWT 토큰은 적절한 만료시간과 갱신 로직 구현
HTTPS 사용 및 CORS 설정 적절히 관리

🕷️ 크롤링/스크래핑 특별 규칙
안정성 & 매너

robots.txt를 확인하고 크롤링 정책을 준수하는 코드로 작성
요청 간격에 적절한 딜레이(1-3초)를 두어 서버에 부담 주지 않음
User-Agent를 적절히 설정하고 봇으로 인식되지 않도록 처리
IP 차단을 방지하기 위한 프록시 로테이션 로직 포함
실패한 요청에 대한 재시도 로직을 exponential backoff로 구현

데이터 처리 & 파싱

동적 컨텐츠를 위해 Selenium/Playwright 대기 조건을 명확히 설정
CSS 셀렉터와 XPath를 안정적으로 조합해서 데이터 추출
예상치 못한 HTML 구조 변경에 대비한 fallback 로직 추가
추출한 데이터의 검증과 정제 과정 포함
크롤링 결과를 CSV/JSON/DB 등 다양한 형태로 저장 가능하게 구현

모니터링 & 로깅

크롤링 진행상황과 에러를 상세히 로깅하는 시스템 구현
멀티스레딩/비동기 처리로 크롤링 성능 최적화
크롤링 통계 및 성공률 모니터링 기능 추가

🎨 코딩 스타일 & 컨벤션
명명 규칙

함수명: camelCase (getUserData, calculateTotal)
변수명: camelCase (userName, totalAmount)
상수명: UPPER_SNAKE_CASE (API_BASE_URL, MAX_RETRY_COUNT)
클래스명: PascalCase (UserService, DataProcessor)
파일명: kebab-case (user-service.js, data-processor.ts)
컴포넌트명: PascalCase (UserProfile, DataTable)

언어 사용 규칙

- 주석과 문서화는 한글로 작성 (사용자가 한글을 가장 편하게 사용하므로)
- 변수명과 함수명은 영문 사용 (코드의 국제적 호환성 유지)
- 에러 메시지와 로그는 한글로 작성
- README.md, DEVELOPMENT_CONTEXT.md, CODE_DESCRIPTION.md는 한글로 작성
- 코드 내 문자열 상수는 한글로 작성 (예: 에러 메시지, UI 텍스트)
- API 응답 메시지는 한글로 작성
- 데이터베이스 필드명은 영문 사용 (DB 호환성 유지)

코드 구조

import 문은 외부 라이브러리 → 내부 모듈 순서로 정렬
export는 파일 하단에 모아서 관리
함수는 사용되는 순서대로 배치
복잡한 로직은 별도 함수로 분리

📚 문서화 & 주석

README.md는 프로젝트 개요, 설치방법, 사용법, API 문서 포함
복잡한 비즈니스 로직에는 왜(Why) 주석 추가
API 함수들은 JSDoc/docstring으로 문서화
환경변수 설정 가이드를 별도 문서로 작성
변경사항은 CHANGELOG.md에 기록
CODE_DESCRIPTION.md는 코드 변경 사항과 영향도를 상세히 기록
문서 간 일관성 유지를 위한 검증 로직 구현

🔄 작업 플로우 (자동 실행)
작업 시작 시

README.md와 DEVELOPMENT_CONTEXT.md 상태 확인
기존 아키텍처와 일관성 체크
관련 유틸리티 함수 재사용 가능성 확인
작업 내용을 README.md 진행상황에 반영
CODE_DESCRIPTION.md에 예상되는 변경 사항 추가

작업 완료 시

완료된 기능을 README.md 진행상황에 업데이트
새로 추가된 의존성이나 설정을 문서화
다음 작업을 위한 TODO 추가 및 우선순위 설정
발견된 이슈나 개선사항을 이슈 섹션에 기록
DEVELOPMENT_CONTEXT.md에 새로운 컨벤션이나 패턴 추가
CODE_DESCRIPTION.md에 실제 변경 사항과 영향도 업데이트

🛠️ 개발 환경 & 도구

ESLint/Prettier 설정에 따른 코드 포맷팅 적용
Git 커밋 메시지는 Conventional Commits 스타일 사용
브랜치명은 feature/기능명, fix/버그명, refactor/리팩토링내용 형식
package.json 스크립트는 명확하고 직관적으로 작성

🎯 바이브 코딩 핵심 원칙

속도보다 품질: 빠르게 작성하되 견고한 코드 우선
예측 가능한 코드: 다른 개발자가 쉽게 이해할 수 있도록
점진적 개선: 완벽하지 않아도 지속적으로 리팩토링
자동화 우선: 반복적인 작업은 스크립트로 자동화
피드백 루프: 빠른 테스트와 검증으로 문제 조기 발견

⚠️ 주의사항

레거시 코드 수정 시 기존 패턴을 존중하되 점진적 개선
외부 API 호출 시 rate limiting과 타임아웃 설정 필수
대용량 데이터 처리 시 메모리 사용량 모니터링
프로덕션 배포 전 반드시 보안 취약점 점검

🧩 구조/대규모 변경 규칙
- 기존 코드 구조와 아키텍처를 최대한 존중하며, 수정 시 기존 흐름과 패턴을 우선적으로 따른다.
- 전체 구조 변경, 대규모 리팩토링, 새 파일/클래스/모듈 생성 등은 반드시 사용자 컨펌(승인)을 받은 후 진행한다.
- 사소한 리팩토링이나 함수 분리 등도 기존 코드 스타일을 우선적으로 고려한다.