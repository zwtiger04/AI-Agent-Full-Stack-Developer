# 🔄 전력산업 뉴스 자동화 플로우 계획

## 📅 작성 정보
- **작성일**: 2025년 6월 9일
- **프로젝트명**: 전력산업 뉴스 크롤링 → 카드뉴스 자동화
- **목표**: 크롤링부터 카드뉴스 제작까지 완전 자동화

## 🎯 전체 플로우 개요

```mermaid
graph LR
    A[전기신문 크롤링] --> B[키워드/요약 생성]
    B --> C[노션 저장]
    C --> D[사용자 관심 체크]
    D --> E[카드뉴스 제작]
    E --> F[요약 페이지 업데이트]
```

## 📋 상세 단계별 프로세스

### 1️⃣ **크롤링 단계** (기존 코드 활용)
- **실행**: `python main.py`
- **대상**: 전기신문 (https://www.electimes.com)
- **필터링**: 
  - 최근 3일 이내 기사
  - 키워드 매칭 (재생에너지, VPP, ESS, 태양광 등)
  - AI 추천 모델 필터링 (선택적)
- **출력**: 기사 제목, URL, 본문, 날짜, 출처

### 2️⃣ **LLM 처리 단계** (Local LLM - Gemma2)
- **도구**: Ollama + Gemma2:9b-instruct-q5_K_M
- **처리 내용**:
  ```python
  # ai_update_content.py 수정
  summary = generate_one_line_summary_with_llm(content, use_llm=True)  # LLM 활성화
  key_content = generate_key_content(content, use_llm=True)
  ```
- **생성 항목**:
  - 한줄요약: 100-300자
  - 핵심내용: 3-5개 포인트
  - 키워드: 자동 추출

### 3️⃣ **노션 연동 단계**
- **데이터베이스**: "전력 산업 뉴스 YYYY년 WW주차"
- **저장 필드**:
  - 제목, 출처, 날짜
  - 키워드 (multi_select)
  - 한줄요약, 핵심 내용
  - 바로가기 (URL)
  - 관심 (checkbox) ← 사용자 입력
  - AI추천 (checkbox)

### 4️⃣ **사용자 피드백 단계** ⏸️ (수동)
- **작업**: 노션에서 관심 있는 기사에 체크박스 표시
- **주기**: 일일/주간 단위로 검토
- **자동화 방안** (선택적):
  - 노션 Webhook 활용
  - 주기적 폴링으로 변경사항 감지

### 5️⃣ **카드뉴스 제작 단계** 🎨 (Claude AI)
- **트리거**: 관심 체크박스가 True인 기사 감지
- **구현 방법**:

#### 방법 1: Claude API 활용 (완전 자동화)
```python
# card_news_generator.py (신규)
import anthropic

class CardNewsGenerator:
    def __init__(self):
        self.client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)
        
    def generate_card_news(self, article_data):
        prompt = f"""
        다음 기사를 기반으로 시각적으로 매력적인 HTML 카드뉴스를 만들어주세요.
        
        제목: {article_data['title']}
        한줄요약: {article_data['summary']}
        핵심내용: {article_data['key_points']}
        
        요구사항:
        - 다크 테마 (#0a0a0a 배경)
        - 주제에 맞는 색상 테마
        - 인터랙티브 애니메이션
        - 차트/타임라인 포함
        """
        
        response = self.client.messages.create(
            model="claude-3-opus-20240229",
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content
```

#### 방법 2: 템플릿 기반 + Claude API (하이브리드)
```python
# 기본 템플릿 구조 정의
CARD_NEWS_TEMPLATE = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <title>{title}</title>
    <!-- 기본 스타일 -->
</head>
<body>
    <!-- 히어로 섹션 -->
    {hero_section}
    
    <!-- 핵심 인사이트 -->
    {key_insights}
    
    <!-- 데이터 시각화 -->
    {data_visualization}
    
    <!-- 전망 -->
    {outlook}
</body>
</html>
"""

# Claude API로 각 섹션 생성
```

#### 방법 3: 대화형 인터페이스 (반자동)
- Streamlit/Gradio 웹 UI 구축
- 관심 기사 목록 표시
- 클릭 시 Claude와 대화하며 카드뉴스 생성
- 미리보기 및 수정 기능

### 6️⃣ **요약 페이지 업데이트**
- **파일**: `enhanced_summary_YYYYMMDD_HHMMSS.html`
- **업데이트 내용**:
  - 새로운 카드뉴스 링크 추가
  - 카드 디자인 일관성 유지
  - 필터/정렬 기능 업데이트

## 🛠️ 기술 스택

### 필수 구성요소
- **크롤링**: Selenium, BeautifulSoup, requests
- **LLM**: Ollama + Gemma2 (로컬)
- **노션**: notion-client Python SDK
- **카드뉴스**: 
  - Claude API (anthropic Python SDK)
  - HTML/CSS/JavaScript
  - Pretendard 폰트

### 추가 필요 라이브러리
```bash
pip install anthropic  # Claude API
pip install streamlit  # 웹 UI (선택적)
pip install watchdog   # 파일 변경 감지 (선택적)
```

## 📊 자동화 레벨

### Level 1: 기본 자동화 (현재)
- ✅ 크롤링 → LLM 요약 → 노션 저장
- ❌ 수동: 관심 체크, 카드뉴스 제작

### Level 2: 부분 자동화 (권장)
- ✅ 크롤링 → LLM 요약 → 노션 저장
- ✅ 관심 기사 감지 → 알림
- ⚡ 반자동: 카드뉴스 제작 (웹 UI + Claude)

### Level 3: 완전 자동화
- ✅ 전체 프로세스 자동화
- ✅ Claude API로 카드뉴스 자동 생성
- ⚠️ 높은 API 비용, 품질 관리 어려움

## 💰 비용 분석

### Claude API 비용 (2025년 6월 기준)
- Claude 3 Opus: 
  - Input: $15 / 1M tokens
  - Output: $75 / 1M tokens
- 예상 비용 (기사당):
  - Input: ~2,000 tokens × $0.015 = $0.03
  - Output: ~5,000 tokens × $0.075 = $0.375
  - **기사당 약 $0.40 (약 550원)**

### 월간 예상 비용
- 일 5개 기사 × 30일 = 150개
- 150개 × $0.40 = **$60/월 (약 82,500원)**

## 🚀 구현 로드맵

### Phase 1: 기존 시스템 개선 (1주)
1. LLM 요약 기능 활성화 (`use_llm=True`)
2. 관심 기사 감지 스크립트 작성
3. 기본 템플릿 시스템 구축

### Phase 2: Claude API 연동 (1주)
1. Anthropic API 설정
2. 카드뉴스 생성 모듈 개발
3. 템플릿 + AI 하이브리드 구현

### Phase 3: UI 및 자동화 (2주)
1. Streamlit 웹 UI 구축
2. 노션 Webhook 연동 (가능한 경우)
3. 전체 파이프라인 통합

### Phase 4: 최적화 (지속적)
1. 프롬프트 엔지니어링
2. 비용 최적화
3. 품질 개선

## 📝 환경 변수 추가 필요

```bash
# .env 파일에 추가
ANTHROPIC_API_KEY=your_api_key_here
CARD_NEWS_OUTPUT_DIR=/path/to/output
CARD_NEWS_TEMPLATE_DIR=/path/to/templates
```

## 🔍 모니터링 및 로깅

### 추적 항목
- 크롤링된 기사 수
- LLM 처리 성공/실패율
- Claude API 사용량 및 비용
- 카드뉴스 생성 시간
- 사용자 피드백 (관심 비율)

### 로그 파일
- `logs/crawler_YYYYMMDD.log` - 크롤링 로그
- `logs/llm_YYYYMMDD.log` - LLM 처리 로그  
- `logs/claude_YYYYMMDD.log` - 카드뉴스 생성 로그
- `logs/cost_YYYYMM.log` - 월별 비용 추적

## ⚠️ 주의사항

1. **API 키 보안**: 절대 코드에 직접 입력하지 않고 환경변수 사용
2. **비용 관리**: Claude API 사용량 모니터링 필수
3. **품질 검증**: 자동 생성된 카드뉴스 정기적 검토
4. **백업**: 생성된 HTML 파일 정기 백업

## 🤝 협업 방안

### 사용자 역할
- 관심 기사 선택
- 카드뉴스 품질 검토
- 피드백 제공

### 시스템 역할
- 자동 크롤링 및 요약
- 카드뉴스 초안 생성
- 일관된 디자인 유지

---

이 계획을 기반으로 단계적으로 자동화를 구현하시겠습니까?
먼저 어느 레벨의 자동화를 목표로 하시는지 결정해주세요.

## 💰 Level 2 상세 비용 분석 (2025년 6월 업데이트)

### Claude API 토큰 사용량 상세

#### 기사당 토큰 분석
| 구분 | 토큰 수 | 비용 |
|------|---------|------|
| **입력 (Input)** |  |  |
| - 프롬프트 템플릿 | 500 tokens | $0.0075 |
| - 기사 데이터 | 1,500 tokens | $0.0225 |
| **출력 (Output)** |  |  |
| - HTML 생성 | 5,000 tokens | $0.375 |
| - 수정 (선택적) | 2,000 tokens | $0.15 |
| **합계** |  |  |
| - 첫 생성 | 7,000 tokens | $0.405 |
| - 수정 1회 포함 | 9,000 tokens | $0.555 |

### 월간 비용 시나리오

#### 1. 최소 사용 (월 20개)
- 주 5개 × 4주 = 20개
- 비용: $11.10 (약 15,200원)
- 적합: 핵심 기사만 선별

#### 2. 보수적 사용 (월 60개) ✅ 추천
- 일 2개 × 30일 = 60개
- 비용: $33.30 (약 45,700원)
- 적합: 일반적인 운영

#### 3. 적극적 사용 (월 150개)
- 일 5개 × 30일 = 150개
- 비용: $83.25 (약 114,300원)
- 적합: 다양한 콘텐츠 필요

### 비용 절감 팁
1. **템플릿 재사용**: 비슷한 주제는 템플릿 수정으로 대응
2. **일괄 처리**: 여러 기사를 한 번에 처리하여 프롬프트 최적화
3. **캐싱**: 자주 사용하는 요소는 로컬에 저장
4. **선별적 수정**: 꼭 필요한 경우만 재생성

---

## 🚀 구현 로드맵 업데이트 (Level 2 중심)

### Week 1: 기초 시스템 구축
- [ ] Gemma2 LLM 활성화 및 테스트
- [ ] 관심 기사 모니터링 스크립트 개발
- [ ] 기본 파일 구조 설정

### Week 2: 웹 UI 개발
- [ ] Streamlit 앱 기본 구조
- [ ] Claude API 연동
- [ ] 미리보기 기능 구현

### Week 3: 통합 및 최적화
- [ ] 전체 파이프라인 연결
- [ ] 에러 처리 및 로깅
- [ ] 사용자 피드백 반영

### Week 4: 배포 및 문서화
- [ ] 실행 스크립트 작성
- [ ] 사용자 가이드 작성
- [ ] 비용 모니터링 시스템

# 📋 Level 2 부분 자동화 상세 구현 계획

## 🎯 목표
- 사용자가 관심 표시한 기사를 쉽게 카드뉴스로 변환
- Claude AI와의 대화형 인터페이스로 품질 관리
- 비용 효율적인 운영

## 🔧 구현 컴포넌트

### 1. 관심 기사 모니터링 스크립트
`watch_interested_articles.py`

```python
import time
import json
from datetime import datetime
from notion.notion_client import NotionClient

class InterestMonitor:
    def __init__(self):
        self.notion = NotionClient()
        self.processed_articles = self.load_processed()
        
    def load_processed(self):
        """이미 처리한 기사 ID 로드"""
        try:
            with open('processed_articles.json', 'r') as f:
                return set(json.load(f))
        except:
            return set()
    
    def save_processed(self, article_id):
        """처리 완료한 기사 ID 저장"""
        self.processed_articles.add(article_id)
        with open('processed_articles.json', 'w') as f:
            json.dump(list(self.processed_articles), f)
    
    def check_new_interests(self):
        """새로운 관심 기사 확인"""
        # 모든 주차의 관심 기사 가져오기
        interested = self.notion.get_interested_articles()
        
        new_articles = []
        for article in interested:
            if article['page_id'] not in self.processed_articles:
                new_articles.append(article)
                
        return new_articles
    
    def run(self, interval=300):  # 5분마다 체크
        """모니터링 실행"""
        print("🔍 관심 기사 모니터링 시작...")
        
        while True:
            new_articles = self.check_new_interests()
            
            if new_articles:
                print(f"✨ 새로운 관심 기사 {len(new_articles)}개 발견!")
                # 웹 UI용 파일에 저장
                with open('pending_cardnews.json', 'w', encoding='utf-8') as f:
                    json.dump(new_articles, f, ensure_ascii=False, indent=2)
            
            time.sleep(interval)
```

### 2. Streamlit 웹 UI
`card_news_app.py`

```python
import streamlit as st
import json
from pathlib import Path
import anthropic
from datetime import datetime

# 페이지 설정
st.set_page_config(
    page_title="전력산업 카드뉴스 생성기",
    page_icon="⚡",
    layout="wide"
)

class CardNewsApp:
    def __init__(self):
        self.anthropic_client = None
        self.setup_api()
        
    def setup_api(self):
        """API 설정"""
        api_key = st.secrets.get("ANTHROPIC_API_KEY")
        if api_key:
            self.anthropic_client = anthropic.Anthropic(api_key=api_key)
    
    def load_pending_articles(self):
        """대기 중인 기사 로드"""
        try:
            with open('pending_cardnews.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    
    def generate_card_news(self, article):
        """Claude를 통한 카드뉴스 생성"""
        prompt = f"""
        전력산업 관련 기사를 시각적으로 매력적인 HTML 카드뉴스로 만들어주세요.
        
        [기사 정보]
        제목: {article['title']}
        요약: {article['summary']}
        핵심내용: {article['content']}
        키워드: {', '.join(article.get('keywords', []))}
        
        [요구사항]
        1. 다크 테마 (#0a0a0a 배경)
        2. 주제에 맞는 색상 테마 선택
        3. 히어로 섹션 + 핵심 인사이트 + 데이터 시각화 + 전망
        4. 인터랙티브 애니메이션 (hover, scroll, counter)
        5. Pretendard 폰트 사용
        6. 반응형 디자인
        
        완전한 HTML 파일을 생성해주세요.
        """
        
        with st.spinner('🎨 카드뉴스 생성 중...'):
            response = self.anthropic_client.messages.create(
                model="claude-3-opus-20240229",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=4000
            )
            
        return response.content[0].text
    
    def run(self):
        """앱 실행"""
        st.title("⚡ 전력산업 카드뉴스 생성기")
        
        # 사이드바
        with st.sidebar:
            st.header("📋 설정")
            
            # API 키 확인
            if not self.anthropic_client:
                st.error("⚠️ Anthropic API 키가 설정되지 않았습니다.")
                api_key = st.text_input("API Key", type="password")
                if api_key:
                    self.anthropic_client = anthropic.Anthropic(api_key=api_key)
                    st.success("✅ API 연결 성공!")
            
            # 새로고침 버튼
            if st.button("🔄 기사 목록 새로고침"):
                st.rerun()
        
        # 메인 컨텐츠
        articles = self.load_pending_articles()
        
        if not articles:
            st.info("📭 카드뉴스로 만들 관심 기사가 없습니다.")
            return
        
        # 기사 선택
        st.header("📰 관심 기사 목록")
        
        # 기사 카드 표시
        cols = st.columns(2)
        for idx, article in enumerate(articles):
            with cols[idx % 2]:
                with st.container():
                    st.subheader(article['title'])
                    st.caption(f"키워드: {', '.join(article.get('keywords', []))}")
                    st.write(article['summary'])
                    
                    if st.button(f"🎨 카드뉴스 생성", key=f"gen_{idx}"):
                        self.generate_for_article(article, idx)
    
    def generate_for_article(self, article, idx):
        """특정 기사의 카드뉴스 생성"""
        st.header(f"🎨 카드뉴스 생성: {article['title']}")
        
        # 생성 옵션
        col1, col2 = st.columns(2)
        with col1:
            color_theme = st.selectbox(
                "색상 테마",
                ["자동 선택", "ESS/배터리 (초록/파랑)", "태양광 (노랑/주황)", 
                 "정책 (파랑/보라)", "문제/경고 (빨강/주황)"]
            )
        
        with col2:
            emphasis = st.multiselect(
                "강조할 요소",
                ["차트/그래프", "타임라인", "비교 테이블", "인용구", "통계 카운터"]
            )
        
        if st.button("🚀 생성 시작"):
            # Claude API 호출
            html_content = self.generate_card_news(article)
            
            # 미리보기
            st.subheader("👁️ 미리보기")
            st.components.v1.html(html_content, height=800, scrolling=True)
            
            # 저장 옵션
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("💾 저장"):
                    filename = f"detail_{article['title'][:30]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
                    output_path = Path("detailed") / filename
                    output_path.parent.mkdir(exist_ok=True)
                    
                    with open(output_path, 'w', encoding='utf-8') as f:
                        f.write(html_content)
                    
                    st.success(f"✅ 저장 완료: {filename}")
                    
                    # 처리 완료 표시
                    self.mark_as_processed(article['page_id'])
            
            with col2:
                if st.button("✏️ 수정 요청"):
                    self.request_modification(html_content, article)
            
            with col3:
                if st.button("🔄 다시 생성"):
                    st.rerun()

if __name__ == "__main__":
    app = CardNewsApp()
    app.run()
```

### 3. 통합 실행 스크립트
`run_level2_automation.py`

```python
#!/usr/bin/env python3
import subprocess
import time
from pathlib import Path

def run_monitoring():
    """백그라운드에서 관심 기사 모니터링"""
    subprocess.Popen(['python', 'watch_interested_articles.py'])
    print("✅ 관심 기사 모니터링 시작")

def run_streamlit():
    """Streamlit 웹 UI 실행"""
    subprocess.run(['streamlit', 'run', 'card_news_app.py'])

def main():
    print("🚀 Level 2 자동화 시스템 시작")
    
    # 1. 모니터링 시작
    run_monitoring()
    
    # 2. 잠시 대기
    time.sleep(2)
    
    # 3. 웹 UI 실행
    print("🌐 웹 UI 시작 중...")
    print("브라우저에서 http://localhost:8501 접속")
    run_streamlit()

if __name__ == "__main__":
    main()
```

## 💡 주요 기능

### 1. **실시간 모니터링**
- 5분마다 노션 체크
- 새 관심 기사 자동 감지
- JSON 파일로 상태 관리

### 2. **웹 인터페이스**
- 깔끔한 UI로 기사 목록 표시
- 원클릭 카드뉴스 생성
- 실시간 미리보기
- 수정 요청 기능

### 3. **품질 관리**
- 생성 전: 색상 테마, 강조 요소 선택
- 생성 후: 미리보기, 수정, 재생성
- 완성본만 저장

### 4. **비용 통제**
- 사용자가 원하는 기사만 생성
- 생성 횟수 추적
- 월별 사용량 리포트

## 🎯 장점

1. **유연성**: 필요한 기사만 선택적 생성
2. **품질**: 생성 과정에 사용자 개입 가능
3. **비용**: 예측 가능한 API 사용량
4. **사용성**: 직관적인 웹 인터페이스
5. **확장성**: 기능 추가 용이

## ⚠️ 단점

1. **수동 개입**: 완전 자동화 아님
2. **실행 필요**: 웹 서버 상시 실행
3. **초기 설정**: API 키, 환경 구성

## 💰 예상 비용

- **선택적 생성**: 월 10-30개 기사
- **비용**: $4-12/월 (5,500-16,500원)
- **완전 자동화 대비 80% 절감**

이 방식이 가장 현실적이고 실용적입니다!

## 🛡️ Level 2 비용 안전장치 구현 (2025년 6월 9일 추가)

### 비용 관리 기능
1. **사전 비용 고지**
   - 생성 전 $0.555 (약 750원) 비용 명시
   - 현재 사용량 실시간 표시
   - 체크박스 확인 필수

2. **과비용 방지**
   - 일일 한도: $10 (기본값, 조정 가능)
   - 월간 한도: $50 (기본값, 조정 가능)
   - 한도 초과 시 생성 차단

3. **비용 추적**
   - cost_tracking.json 파일에 모든 사용 기록
   - 일별/월별 비용 차트 제공
   - 비용 분석 탭 추가

### 구현 파일
- `card_news_app.py`: 비용 안전장치가 포함된 Streamlit UI
- `card_news_app_original.py`: 이전 버전 백업

### 테스트 완료 사항
- ✅ 17개 관심 기사 발견 및 로드
- ✅ 비용 경고 시스템 구현
- ✅ 한도 관리 시스템 구현
- ✅ 실시간 비용 추적 구현

