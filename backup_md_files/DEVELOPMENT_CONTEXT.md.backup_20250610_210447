# DEVELOPMENT_CONTEXT.md

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 및 분석 작업 실패

### 개발 맥락
작업 실행 중 예기치 않은 오류가 발생했습니다.

### 주요 결정 사항
- 오류 로그 확인 및 디버깅 필요

## 최근 작업 내역 (2025-06-02)

- Notion 동기화 결과

### 개발 맥락
수집된 기사를 Notion 데이터베이스에 동기화했습니다.

### 주요 결정 사항
- 주간 데이터베이스 사용
- 기사 메타데이터 포함

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 결과

### 개발 맥락
Electimes 웹사이트에서 전력산업 관련 뉴스를 수집했습니다.

### 주요 결정 사항
- 키워드 기반 필터링으로 관련 기사 선별
- 날짜 기반 필터링으로 최신 기사 선별

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 및 분석 작업 시작

### 개발 맥락
전력산업 관련 뉴스를 수집하고 분석하여 Notion에 동기화하는 작업을 시작합니다.

### 주요 결정 사항
- ElectimesCrawler를 사용하여 뉴스 수집
- ArticleRecommender를 통한 AI 기반 추천
- Notion 데이터베이스에 주간 단위로 동기화

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 및 분석 작업 실패

### 개발 맥락
작업 실행 중 예기치 않은 오류가 발생했습니다.

### 주요 결정 사항
- 오류 로그 확인 및 디버깅 필요

## 최근 작업 내역 (2025-06-02)

- Notion 동기화 결과

### 개발 맥락
수집된 기사를 Notion 데이터베이스에 동기화했습니다.

### 주요 결정 사항
- 주간 데이터베이스 사용
- 기사 메타데이터 포함

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 결과

### 개발 맥락
Electimes 웹사이트에서 전력산업 관련 뉴스를 수집했습니다.

### 주요 결정 사항
- 키워드 기반 필터링으로 관련 기사 선별
- 날짜 기반 필터링으로 최신 기사 선별

## 최근 작업 내역 (2025-06-02)

- 전력산업 뉴스 크롤링 및 분석 작업 시작

### 개발 맥락
전력산업 관련 뉴스를 수집하고 분석하여 Notion에 동기화하는 작업을 시작합니다.

### 주요 결정 사항
- ElectimesCrawler를 사용하여 뉴스 수집
- ArticleRecommender를 통한 AI 기반 추천
- Notion 데이터베이스에 주간 단위로 동기화

## 최근 작업 내역 (2025-06-02)

- Ollama API 응답 파싱 로직 수정: 생성된 요약과 핵심 내용을 정확히 추출하도록 개선
- 키워드 분석 시스템 개선 필요성 확인: 현재 키워드 도출이 정교하지 못한 문제 발견
- Notion 동기화 시 기존 기사 업데이트 로직 개선: 출처, 한줄요약, 핵심 내용 업데이트 기능 추가
- 문서 자동 업데이트 시스템 구현 계획: README.md, DEVELOPMENT_CONTEXT.md, CODE_DESCRIPTION.md 주기적 업데이트

## 프로젝트 개발 컨텍스트 및 규칙

- 모든 코드는 .cursorrules에 정의된 규칙(아키텍처, 네이밍, 에러처리, 보안, 테스트 등)을 준수
- 환경변수 및 민감정보는 .env 파일로 분리 관리
- 크롤러는 Selenium+BeautifulSoup 조합, Notion 연동은 notion_client.py를 통해 API 사용
- 크롤러의 CSS 셀렉터, 페이지네이션, 기사 필터링 로직은 실제 사이트 구조와 동작에 맞게 지속 개선
- 주요 변경사항은 README.md, Codedescription.md, DEVELOPMENT_CONTEXT.md에 반드시 기록

## 향후 작업 방향

- processors, utils 모듈 구현 및 테스트 코드 보강
- 크롤러 추가(다른 미디어/기관)
- 카드 뉴스 자동 생성 로직 개발
- 크롤링/동기화 성능 및 안정성 지속 개선
- **AI 추천 기능 고도화를 위한 기사 본문 분석 로직 개발**
- **이를 위한 선행 작업으로 Notion DB 내 기존 기사들의 '바로가기', '한줄요약', '핵심 내용' 컬럼 보완**
- **Notion 페이지 내부의 원본 기사 링크를 참조하여 데이터 업데이트 구현**

## 최근 개발 컨텍스트 및 주요 결정 사항 (2025년 6월 2일)

### 1. Ollama API 응답 파싱 문제
- **문제:** Ollama API가 생성한 요약과 핵심 내용이 Notion에 제대로 반영되지 않는 문제 발생
- **원인 분석:** Ollama API 응답 구조(`result['choices'][0]['message']['content']`)와 코드의 파싱 로직(`result.get('message', {}).get('content', '')`)이 일치하지 않음
- **해결:** `ai_update_content.py`의 응답 파싱 로직을 수정하여 올바른 경로에서 생성된 텍스트를 추출하도록 변경
- **결과:** Ollama가 생성한 요약과 핵심 내용이 정확히 Notion에 반영됨

### 2. 키워드 분석 시스템 개선 필요성
- **문제:** 현재 키워드 도출이 정교하지 못하고 무의미한 키워드나 일반적인 키워드가 많이 포함되는 문제
- **원인 분석:** 키워드 추출 알고리즘이 문맥을 고려하지 않고 단순히 빈도수 기반으로 동작
- **해결 계획:** 
  1. 데이터베이스가 쌓일 때까지 사용자가 제시한 키워드를 중심으로 분석
  2. AI 패턴 학습은 지속적으로 수행
  3. 무의미한 키워드와 일반적인 키워드를 필터링하는 로직 추가
- **향후 작업:** 키워드 분석 시스템 개선을 위한 별도 작업 계획 수립 필요

### 3. 문서 자동 업데이트 시스템
- **문제:** 프로젝트 문서(README.md, DEVELOPMENT_CONTEXT.md, CODE_DESCRIPTION.md)가 수동으로 업데이트되어 일관성이 떨어지는 문제
- **해결 계획:**
  1. 작업 시작/완료 시 자동으로 문서 업데이트하는 시스템 구현
  2. 새로운 컨벤션이나 패턴 발견 시 자동 문서화
  3. 문서 간 일관성 유지를 위한 검증 로직 추가
- **향후 작업:** 문서 자동 업데이트 시스템 구현을 위한 별도 작업 계획 수립 필요

### 4. 한줄요약 및 핵심 내용 생성 방식 개선
- **문제:** 로컬 LLM(Mistral)의 한국어 요약 및 핵심 내용 생성 품질이 기대에 미치지 못함
- **원인 분석:** LLM 자체의 성능 한계 또는 한국어 처리에 대한 부족함 추정
- **해결:**
  - 기존 LLM 기반 방식은 코드를 유지하되, **규칙 기반** 요약/핵심 내용 생성 방식 추가 구현
  - `ai_update_content.py`에 기사 첫 문장 추출 및 첫 2~3 문단 추출 등의 규칙 기반 함수 추가 (`generate_one_line_summary_rule_based`, `generate_key_content_rule_based`)
  - LLM 기반 함수(`generate_one_line_summary_with_llm`, `generate_key_content`)에 `use_llm: bool = True` 인자를 추가하여, `use_llm=False` 시 규칙 기반 함수를 호출하도록 로직 수정
- **결정:**
  - **`update_empty_fields.py` 스크립트 및 `notion_client.py`의 메인 동기화 로직에서 기본적으로 `use_llm=False`를 설정하여 규칙 기반 방식을 사용.**
  - LLM 기반 방식은 코드를 남겨두어 향후 필요시 쉽게 전환 가능하도록 함.
- **결과:** 규칙 기반 방식을 통해 더 예측 가능하고 안정적인 요약 및 핵심 내용 생성이 가능해짐.

### 5. 크롤링 기준 명확화
- **개발 맥락:** `main.py`에서 `ElectimesCrawler`를 통해 기사를 수집하는 기준에 대한 논의 및 확인 필요성 발생
- **확인 결과:**
  - **출처:** 전기신문 (`electimes.com`) 만 크롤링
  - **기간:** 최근 3일 이내 기사만 대상
  - **필터링:** 정의된 키워드(`ElectimesCrawler.KEYWORDS` 및 관심 기사에서 추출된 키워드)가 기사 제목 또는 본문에 포함되어야 함
  - **본문 추출:** 기사 본문 내용을 성공적으로 가져와야 함
  - **중복 처리:** `ElectimesCrawler.crawl()` 단계에서는 별도의 Notion 중복 체크를 하지 않으며, Notion 동기화 단계(`notion_client.py.sync_articles`)에서 URL을 기준으로 중복 기사를 처리함.
- **결과:** 기사 수집 기준에 대한 이해 명확화.

### 6. AI 추천 시스템 역할 재확인
- **개발 맥락:** 요약/핵심 내용 생성 방식 변경에 따른 AI 추천 시스템의 역할 확인 필요성 발생
- **확인 결과:**
  - AI 추천 시스템(`ai_recommender.py`)은 사용자 피드백(Notion의 '관심' 체크)을 기반으로 머신러닝 모델을 학습하고, 새로운 기사에 대한 추천 여부를 예측하는 역할
  - 이 기능은 요약/핵심 내용 생성 방식 변경과 별개로 작동하며, 계속해서 AI를 활용하여 패턴 분석 및 추천 제공
- **결과:** AI 추천 시스템의 역할 명확화 및 기존대로 유지 결정.

### 7. `googletrans` 설치 및 LLM 번역 로직 복원
- **문제:** `googletrans` 모듈이 `requirements.txt`에 없어 설치되지 않아 `ModuleNotFoundError` 발생.
- **원인 분석:** `googletrans`의 종속성 문제 또는 패키지 이름 문제.
- **해결:** `requirements.txt`에서 `googletrans==3.1.0a0`를 호환성이 좋은 `googletrans-py==4.0.0`로 변경하고 Docker 이미지를 성공적으로 다시 빌드함.
- **변경 내용:** `ai_update_content.py`에서 LLM이 생성한 **영어** 요약 및 핵심 내용을 `googletrans-py`를 사용하여 **한국어**로 번역하는 로직을 복원함.
- **결정:** `googletrans-py`를 사용하여 번역 기능을 유지하되, 규칙 기반 방식 (`use_llm=False`)을 기본으로 사용하도록 설정.
- **결과:** 필요한 번역 기능을 복원하고 Docker 환경에서 모듈이 정상적으로 설치됨.

### 8. 코드 중복 및 미사용 코드 개선
- **문제:** 코드베이스 내에 데이터베이스 검색 로직 중복, 불용어 목록 중복, 문서 검증 로직 분산 및 중복, 미사용 코드 존재
- **원인 분석:** 초기 개발 과정에서 발생한 기능 구현 분산 및 리팩토링 부족
- **해결:**
  - `NotionClient`에 `_search_database` 메서드를 추가하여 데이터베이스 검색 로직 통합
  - `KeywordProcessor`의 불용어 목록에서 중복 항목 제거
  - `document_validator.py`와 `document_updater.py`의 검증 로직을 `utils/document_manager.py` 클래스로 통합 (기존 파일 정리)
  - `utils/debug_cleanup.py` 스크립트 추가
  - `pattern_detector.py`에서 미사용 구조 검사 코드 주석 처리/제거
- **결과:** 코드 중복 감소, 유지보수성 향상, 각 모듈의 역할 명확화

--- 