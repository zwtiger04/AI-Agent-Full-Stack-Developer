#!/usr/bin/env python3
"""
자동화 카드뉴스 생성 테스트
"""
import json
import os
from datetime import datetime
from anthropic import Anthropic
from dotenv import load_dotenv

# 환경변수 로드
load_dotenv()

def load_pending_articles():
    """대기 중인 기사 로드"""
    with open('pending_cardnews.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def generate_cardnews_with_claude(article):
    """Claude API를 사용하여 카드뉴스 생성"""
    
    # Claude API 클라이언트 초기화
    api_key = os.getenv('ANTHROPIC_API_KEY')
    if not api_key:
        print("❌ ANTHROPIC_API_KEY가 설정되지 않았습니다.")
        return None
    
    client = Anthropic(api_key=api_key)
    
    # 프롬프트 생성
    title = article['title']
    keywords = ', '.join(article.get('keywords', []))
    content = article.get('content', '')
    
    # 색상 테마 결정
    color_map = {
        '재생에너지': '#10B981',
        '태양광': '#10B981',
        '풍력': '#10B981',
        'VPP': '#06B6D4',
        '전력중개': '#06B6D4',
        'ESS': '#8B5CF6',
        '전력저장': '#8B5CF6',
        '전력시장': '#3B82F6',
        '정책': '#3B82F6',
        '전력망': '#1E40AF',
        '인프라': '#1E40AF'
    }
    
    primary_color = '#3B82F6'  # 기본 색상
    for keyword in article.get('keywords', []):
        if keyword in color_map:
            primary_color = color_map[keyword]
            break
    
    prompt = f"""당신은 전력 산업 전문 카드뉴스 디자이너입니다. 다음 뉴스 기사를 바탕으로 Enhanced 스타일의 5페이지 HTML 카드뉴스를 만들어주세요.

[기사 정보]
제목: {title}
키워드: {keywords}
내용: {content}
주요 색상: {primary_color}

[Enhanced 스타일 가이드]
1. Pretendard 폰트 사용
2. 5개 섹션 구조로 구성
3. 주요 색상을 활용한 그래디언트와 강조 효과
4. CSS 애니메이션과 인터랙티브 요소 포함
5. Chart.js를 활용한 데이터 시각화
6. 반응형 디자인

완전한 HTML 파일을 생성해주세요. 모든 스타일과 스크립트는 인라인으로 포함해주세요."""

    try:
        # Claude API 호출
        print("🤖 Claude API 호출 중...")
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=8000,
            temperature=0.7,
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )
        
        # HTML 추출
        html_content = response.content[0].text
        
        # HTML 태그가 없으면 래핑
        if not html_content.strip().startswith('<!DOCTYPE') and not html_content.strip().startswith('<html'):
            html_content = f"""<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
</head>
<body>
{html_content}
</body>
</html>"""
        
        return html_content
        
    except Exception as e:
        print(f"❌ 오류 발생: {str(e)}")
        return None

def main():
    """메인 실행 함수"""
    # 대기 중인 기사 로드
    articles = load_pending_articles()
    
    if len(articles) < 3:
        print("❌ 3번 기사가 없습니다.")
        return
    
    # 3번 기사 선택 (전남도-시군 ESS 지원단)
    article = articles[2]
    print(f"📰 선택된 기사: {article['title']}")
    
    # 비용 확인
    print("\n💰 예상 비용: 약 $0.555 (750원)")
    confirm = input("계속하시겠습니까? (y/n): ")
    
    if confirm.lower() != 'y':
        print("❌ 취소되었습니다.")
        return
    
    # 카드뉴스 생성
    html_content = generate_cardnews_with_claude(article)
    
    if html_content:
        # 파일 저장
        filename = f"test_comparison/auto_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"\n✅ 카드뉴스가 생성되었습니다: {filename}")
        print(f"📊 파일 크기: {len(html_content):,} bytes")
        
        # 비용 기록
        cost_data = {
            "timestamp": datetime.now().isoformat(),
            "article_title": article['title'],
            "cost_usd": 0.555,
            "cost_krw": 750,
            "model": "claude-3-5-sonnet-20241022"
        }
        
        # 비용 추적 파일 업데이트
        cost_file = "cost_tracking.json"
        if os.path.exists(cost_file):
            with open(cost_file, 'r', encoding='utf-8') as f:
                cost_history = json.load(f)
        else:
            cost_history = {"total_cost_usd": 0, "total_cost_krw": 0, "history": []}
        
        cost_history["total_cost_usd"] += cost_data["cost_usd"]
        cost_history["total_cost_krw"] += cost_data["cost_krw"]
        cost_history["history"].append(cost_data)
        
        with open(cost_file, 'w', encoding='utf-8') as f:
            json.dump(cost_history, f, ensure_ascii=False, indent=2)
        
        print(f"💰 누적 비용: ${cost_history['total_cost_usd']:.2f} ({cost_history['total_cost_krw']:,}원)")
    else:
        print("❌ 카드뉴스 생성에 실패했습니다.")

if __name__ == "__main__":
    main()
